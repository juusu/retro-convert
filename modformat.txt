// offset 0:
// ---------

// channel 0 pattern data:

long[] data; // pattern data for channel 0 - one 32 byte longword per frame

// music data format:

// format a (no new note / dma restart)

33222222222211111111110000000000
10987654321098765432109876543210
vvvvvvvndssssssssssssssspppppppp

v - volume - 7 bits (0-64)
    if both two highest bits set (vol >= 96) then it's a control word
    for the pattern (de)compression algorithm
	
n - new note flag = 0 - no new note

d - dma stop flag (for next frame)	
s - sample offset change in words - 15 bits (-32768 to +32766 bytes) -- sample data must be even aligned
p - period change  (-128 to 127)

// format b

33222222222211111111110000000000
10987654321098765432109876543210
vvvvvvvndssssssssssssspppppppppp

v - volume - 7 bits (0-64)
    if both two highest bits set (vol >= 96) then it's a control word
    for the pattern (de)compression algorithm
	
n - new note flag = 1 - new note
d - dma stop flag (for next frame) 	
	
s - sample offset & loop size table index (13 bits)
    if (d == 0) = set period only
p - period 10 bits (Period range is from 907 to 108)

// control word format:

33222222222211111111110000000000
10987654321098765432109876543210
ccooooooooooooooosssssssssssssss 

c = control bits, always 11

o = offset - number of longwords to lookback for the next music data word
s = size - number of music data words to read from the lookback before fetching next word from the current stream position

if offset < size then repeat the last offset words size / offset times

int mark = 0xFFFF; // end channel 0 note data
long restartFrom; // restart offset for ch 0 (in longwords from pattern data start)

// optional channels 1-3
long[] data; // compressed note data for ch 1
int mark = 0xFFFF;
long restartFrom; // restart offset for ch 1 (in longwords from pattern data start)
long[] data; // compressed note data for ch 2
int mark = 0xFFFF;
long restartFrom; // restart offset for ch 2 (in longwords from pattern data start)
long[] data; // compressed note data for ch 3
int mark = 0xFFFF;
long restartFrom; // restart offset for ch 3 (in longwords from pattern data start)

int mark = 0xFFFF; // second marker marks end of all note data

int DMAbits; // initial value for the DMACON register. ..

struct sample_pointers {
    long sample_ptr;
    long loop_start;
    int sample_length;
    int loop_length;
}

int mark = 0xFFFF; // this marker marks the end of sample pointers

// optional decompression buffer for channel data
// should match the number of channels which have track data (above)
int bufferLength; // length of decompression buffer for ch0 in longwords, 
                   // will get overwriten as part of buffer after player init
long [bufferLength-1]; rest of ch0 buffer, zero filled

int bufferLength; // length of decompression buffer for ch1 in longwords, 
                   // will get overwriten as part of buffer after player init
long [bufferLength-1]; rest of ch1 buffer, zero filled

int bufferLength; // length of decompression buffer for ch2 in longwords, 
                   // will get overwriten as part of buffer after player init
long [bufferLength-1]; rest of ch2 buffer, zero filled

int bufferLength; // length of decompression buffer for ch3 in longwords, 
                   // will get overwriten as part of buffer after player init
long [bufferLength-1]; rest of ch3 buffer, zero filled

char[] sample_data; // uncompressed 8 bit sample data MUST begin with two zero bytes